@page "/login"
@using System.ComponentModel.DataAnnotations
@using FitnessJournal.Application.Dto

@inject HttpClient _httpClient;

@* @inject LoginService _loginService;
 *@
<PageTitle>Login</PageTitle>
<h3>Login</h3>

<main style="
        padding: 2%;
        align-items: center;
        justify-items: center;
        height: 100vh;
      ">
    <div style="text-align: center">
        <h4 style="font-size:40px;">Welcome Back!</h4>
        <p style="font-size:30px;">Enter Your Credentials To Continue</p>
    </div>
    @* <EditForm Model="loginDto" OnValidSubmit="HandleLogin" FormName="loginForm" style="margin-top:15%;margin-bottom:5%;display:grid;display:grid;justify-items: center;">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="email" @bind-Value="this.loginDto.Email" type="email" placeholder="Your Email" style="width:30%;margin-bottom:2%; border-left:none;border-right:none;border-top:none; padding:1%;opacity:25%;" />
        <InputText id="password" @bind-Value="this.loginDto.Password" type="password" style="width:30%;margin-bottom:2%;border-left:none;border-right:none;border-top:none;padding:1%;opacity:25%;color: black;" placeholder="Password" />
        <div style="margin-bottom:2%; display: flex; justify-content: space-between; width:30%;padding:2px;">
            <input type="radio" />
            <span clas>Forgot Password?</span>
        </div>
        <button type="submit" style="padding:1%;width:30%;border-radius:15px;background-color: rgb(194, 94, 111);color: white; font-weight: bold;">Login</button>
    </EditForm> *@
    <form id="contactForm" style="margin-top:15%;margin-bottom:5%;display:grid;display:grid;justify-items: center;">
        <input type="email" name="email" placeholder="Your Email" style="width:30%;margin-bottom:2%; border-left:none;border-right:none;border-top:none; padding:1%;opacity:25%;" />
        <input type="password" name="password" style="width:30%;margin-bottom:2%;border-left:none;border-right:none;border-top:none;padding:1%;opacity:25%;color: black;" placeholder="Password" />
        <div style="margin-bottom:2%; display: flex; justify-content: space-between; width:30%;padding:2px;">
            <input type="radio" />
            <span clas>Forgot Password?</span>
        </div>
        <button style="padding:1%;width:30%;border-radius:15px;background-color: rgb(194, 94, 111);color: white; font-weight: bold;">Login</button>
    </form>

    @if (message != null)
    {
        <p>@message</p>
    } 

</main>
<script>
    document
        .getElementById("contactForm")
        .addEventListener("submit", async function (event) {
            event.preventDefault(); // Prevent the default form submission behavior

            // Get the form data
            const formData = new FormData(this);

            // Convert FormData to JSON object
            const formDataJson = Object.fromEntries(formData.entries());

            try {
                // Send a POST request to the server
                const response = await fetch("https://localhost:7289/api/Login/Login", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(formDataJson),
                });

                if (response.ok) {
                    const result = await response.json();
                    document.getElementById("responseMessage").innerText =
                        "Form submitted successfully!";
                } else {
                    document.getElementById("responseMessage").innerText =
                        "There was an error submitting the form.";
                }
            } catch (error) {
                document.getElementById("responseMessage").innerText =
                    "Network error. Please try again later.";
            }
        });
</script>
    




@code {
    private string email = string.Empty;
    private string passcode = string.Empty;
    private LoginDto loginDto = new LoginDto();
  
    private string message;
    private async Task HandleLogin()
    {
        //var result = await _loginService.CreateLoginAsync(loginDto);

        var result = await _httpClient.PostAsJsonAsync<LoginDto>($"api/Login/Login", loginDto);
        if (result != null)
        {
            message = "Successfully logged in";
            loginDto = new LoginDto();
        }
        else
        {
            message = "Email or password is incorrect!";
            loginDto = new LoginDto();
        }
    }

    // public class LoginDto
    // {
    //     [Required(ErrorMessage = "Email is required.")]
    //     [EmailAddress(ErrorMessage = "Invalid email address format.")]
    //     public string? Email { get; set; }
    //     public string? Password { get; set; }
    // }

}
